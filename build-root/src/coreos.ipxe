:older_release
set older_release true
set coreos_mirror old-releases.coreos.com
echo Setting mirror to ${coreos_mirror}
clear coreos_version
echo -n Please set enter code name of release: ${} && read coreos_version
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/
goto coreos_boot_type

:mirrorcfg
set mirrorcfg mirror/suite=${coreos_version}
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/

:coreos_boot_type
menu ${os} [${coreos_version}] Installer
item --gap Install types
item install ${space} Install
item rescue ${space} Rescue Mode
item expert ${space} Expert Install
item preseed ${space} Specify preseed url...
choose --default ${type} type || goto coreos
echo ${cls}
goto coreos_${type}

:coreos_rescue
set install_params rescue/enable=true
goto coreos_boot

:coreos_expert
set install_params priority=low
goto coreos_boot

:coreos_preseed
echo -n Specify preseed URL for ${os} ${coreos_version}: && read preseedurl
set install_params auto=true priority=critical preseed/url=${preseedurl}
goto coreos_boot

:coreos_install
:coreos_boot
set dir ${dir}${menu}-installer/${arch_a}
imgfree
kernel http://${coreos_mirror}/${dir}/linux ${install_params} ${netcfg} ${mirrorcfg} ${console} -- quiet ${params} initrd=initrd.gz
initrd http://${coreos_mirror}/${dir}/initrd.gz
echo
echo MD5sums:
md5sum linux initrd.gz
iseq ${img_sigs_enabled} true && iseq ${older_release} true && goto skip_sigs ||
iseq ${img_sigs_enabled} true && goto verify_sigs || goto skip_sigs
:verify_sigs
echo
echo Checking signatures...
imgverify linux ${sigs}${dir}/linux.sig || goto error
imgverify initrd.gz ${sigs}${dir}/initrd.gz.sig || goto error
echo Signatures verified!
echo
:skip_sigs
boot

:coreos_exit
clear menu
exit 0
:older_release
set older_release true
set coreos_mirror old-releases.coreos.com
echo Setting mirror to ${coreos_mirror}
clear coreos_version
echo -n Please set enter code name of release: ${} && read coreos_version
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/
goto coreos_boot_type

:mirrorcfg
set mirrorcfg mirror/suite=${coreos_version}
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/

:coreos_boot_type
menu ${os} [${coreos_version}] Installer
item --gap Install types
item install ${space} Install
item rescue ${space} Rescue Mode
item expert ${space} Expert Install
item preseed ${space} Specify preseed url...
choose --default ${type} type || goto coreos
echo ${cls}
goto coreos_${type}

:coreos_rescue
set install_params rescue/enable=true
goto coreos_boot

:coreos_expert
set install_params priority=low
goto coreos_boot

:coreos_preseed
echo -n Specify preseed URL for ${os} ${coreos_version}: && read preseedurl
set install_params auto=true priority=critical preseed/url=${preseedurl}
goto coreos_boot

:coreos_install
:coreos_boot
set dir ${dir}${menu}-installer/${arch_a}
imgfree
kernel http://${coreos_mirror}/${dir}/linux ${install_params} ${netcfg} ${mirrorcfg} ${console} -- quiet ${params} initrd=initrd.gz
initrd http://${coreos_mirror}/${dir}/initrd.gz
echo
echo MD5sums:
md5sum linux initrd.gz
iseq ${img_sigs_enabled} true && iseq ${older_release} true && goto skip_sigs ||
iseq ${img_sigs_enabled} true && goto verify_sigs || goto skip_sigs
:verify_sigs
echo
echo Checking signatures...
imgverify linux ${sigs}${dir}/linux.sig || goto error
imgverify initrd.gz ${sigs}${dir}/initrd.gz.sig || goto error
echo Signatures verified!
echo
:skip_sigs
boot

:coreos_exit
clear menu
exit 0
:older_release
set older_release true
set coreos_mirror old-releases.coreos.com
echo Setting mirror to ${coreos_mirror}
clear coreos_version
echo -n Please set enter code name of release: ${} && read coreos_version
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/
goto coreos_boot_type

:mirrorcfg
set mirrorcfg mirror/suite=${coreos_version}
set dir ${coreos_base_dir}/dists/${coreos_version}/main/installer-${arch_a}/current/images/netboot/

:coreos_boot_type
menu ${os} [${coreos_version}] Installer
item --gap Install types
item install ${space} Install
item rescue ${space} Rescue Mode
item expert ${space} Expert Install
item preseed ${space} Specify preseed url...
choose --default ${type} type || goto coreos
echo ${cls}
goto coreos_${type}

:coreos_rescue
set install_params rescue/enable=true
goto coreos_boot

:coreos_expert
set install_params priority=low
goto coreos_boot

:coreos_preseed
echo -n Specify preseed URL for ${os} ${coreos_version}: && read preseedurl
set install_params auto=true priority=critical preseed/url=${preseedurl}
goto coreos_boot

:coreos_install
:coreos_boot
set dir ${dir}${menu}-installer/${arch_a}
imgfree
kernel http://${coreos_mirror}/${dir}/linux ${install_params} ${netcfg} ${mirrorcfg} ${console} -- quiet ${params} initrd=initrd.gz
initrd http://${coreos_mirror}/${dir}/initrd.gz
echo
echo MD5sums:
md5sum linux initrd.gz
iseq ${img_sigs_enabled} true && iseq ${older_release} true && goto skip_sigs ||
iseq ${img_sigs_enabled} true && goto verify_sigs || goto skip_sigs
:verify_sigs
echo
echo Checking signatures...
imgverify linux ${sigs}${dir}/linux.sig || goto error
imgverify initrd.gz ${sigs}${dir}/initrd.gz.sig || goto error
echo Signatures verified!
echo
:skip_sigs
boot

:coreos_exit
clear menu
exit 0
item alpha ${space} ${os} alpha 
item beta ${space} ${os} beta 
item stable ${space} ${os} stable 
